@page "/user/{userhandle}"
@using global::Shared.Dtos
@using global::Shared.Mapping
@using global::Shared.Model
@using BlazorClient.Constants
@using global::Shared.Constant
@inject IHttpClientFactory HttpClientFactory

<PageTitle>User Profile</PageTitle>

@if (userNotFound)
{
    <p>
        This user does not exist.
    </p>
}
else if (user == null)
{
    <p>
        <em>Fetching user...</em>
    </p>
}
else
{
    <h1>@user.DisplayName</h1>

    <p>#@user.Handle</p>
    <p>@user.Email</p>
}

@if (userNotFound)
{
    
}
else if (posts == null)
{
    <p>
        <em>Fetching posts...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Header</th>
            <th>Date</th>
            <th>Content</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var post in posts)
        {
            <tr>
                <td>@post.Header</td>
                <td>@post.Date?.ToShortDateString()</td>
                <td>@post.Content</td>
            </tr>
        }
        </tbody>
    </table>
}

@code 
{
    [Parameter]
    public string? UserHandle { get; set; }
    
    private List<Post>? posts;
    private User? user;

    private bool userNotFound;
    
    protected override async Task OnInitializedAsync()
    {
        var timelineHttp = HttpClientFactory.CreateClient(Service.UserTimeline);
        var profileHttp = HttpClientFactory.CreateClient(Service.UserProfile);

        await profileHttp
            .GetFromJsonAsync<UserDto>($"{Route.Request.GetProfileWithHandle}{UserHandle}")
            .ContinueWith(async task =>
            {
                var userResult = (await task).ToModel();

                if (userResult == null)
                {
                    user = new User();
                    userNotFound = true;
                }
                else
                {
                    user = userResult;
                }
            });

        posts = (await timelineHttp.GetFromJsonAsync<PostDto[]>($"{Route.Request.GetPostsForUserHandle}{UserHandle}") 
                 ?? Enumerable.Empty<PostDto>())
            .Select(dto => dto.ToModel())
            .ToList();
        
        
    }
}