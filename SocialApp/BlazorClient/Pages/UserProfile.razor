@page "/user/{userhandle}"
@using global::Shared.Dtos
@using BlazorClient.Constants
@using BlazorClient.Helpers
@using global::Shared.Constant
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>User Profile</PageTitle>

@if (UserFound == false)
{
    <p>
        This user does not exist.
    </p>
}
else if (User == null)
{
    <p>
        <em>Fetching user...</em>
    </p>
}
else
{
    <h1>@User.DisplayName</h1>

    <p>#@User.Handle</p>
    
    @if (User.Email is not null)
    {
        <p>@User.Email</p>
    }

    <p>@User.FollowerCount followers, @User.FollowingCount following</p>
}

@if (IsOwnProfile == false && IsFollowing == false)
{
    <p>
        <button class="btn btn-primary" @onclick="Follow">Follow</button>
    </p>
}
else if (IsOwnProfile == false && IsFollowing == true)
{
    <p>
        <button class="btn btn-primary" @onclick="Unfollow">Unfollow</button>
        You're following this user!
    </p>
}

@if (IsFollower == true)
{
    <p>
        This user is following you!
    </p>
}

@if (UserFound == false)
{
    
}
else if (Posts == null)
{
    <p>
        <em>Fetching posts...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Header</th>
            <th>Date</th>
            <th>Content</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var post in Posts)
        {
            <tr>
                <td>@post.Header</td>
                <td>@post.Date?.ToShortDateString()</td>
                <td>@post.Content</td>
            </tr>
        }
        </tbody>
    </table>
}

@code 
{
    [Parameter]
    public string? UserHandle { get; set; }
    
    private HttpClient TimelineHttp;
    private HttpClient ProfileHttp;
    private HttpClient FollowHttp;

    private string? Sub;
    
    private UserDto? User;
    private List<PostDto>? Posts;

    private UserDto? OwnProfile;

    private bool? UserFound;
    private bool? IsFollowing;
    private bool? IsFollower;
    
    private bool CheckedFollow;

    private bool? IsOwnProfile => User is null || OwnProfile is null 
        ? null 
        : User?.Handle == OwnProfile?.Handle;
    
    protected override async Task OnInitializedAsync()
    {
        TimelineHttp = HttpClientFactory.CreateClient(HttpService.Timeline);
        ProfileHttp = HttpClientFactory.CreateClient(HttpService.Profile);
        FollowHttp = HttpClientFactory.CreateClient(HttpService.Follow);

        await Init();
    }

    protected override async Task OnParametersSetAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        User = null;
        UserFound = null;
        IsFollowing = null;
        IsFollower = null;
        
        StateHasChanged();
        
        FetchProfile();
        FetchPosts();

        if (await AuthenticationStateProvider.GetGoogleUserSub() != null)
        {
            FetchOwnProfile();
        }
    }

    private async Task Follow()
    {
        var url = $"{Route.Request.AddFollow}";

        var follow = new FollowDto()
        {
            Follower = OwnProfile?.Handle,
            Following = User?.Handle
        };

        await FollowHttp.PostAsJsonAsync(url, follow);

        await Task.Delay(1000);
        
        FetchIsFollowing();
        FetchProfile();
    }

    private async Task Unfollow()
    {
        var url = $"{Route.Request.RemoveFollow}";

        var follow = new FollowDto()
        {
            Follower = OwnProfile?.Handle,
            Following = User?.Handle
        };
        
        await FollowHttp.PostAsJsonAsync(url, follow);

        await Task.Delay(1000);
        
        FetchIsFollowing();
        FetchProfile();
    }

    private async Task FetchProfile()
    {
        var url = $"{Route.Request.GetProfileWithHandle}{UserHandle}";

        User = await ProfileHttp.GetFromJsonAsync<UserDto?>(url);

        UserFound = User != null;

        StateHasChanged();
        
        await OnProfileFetched();
    }

    private async Task FetchOwnProfile()
    {
        Sub = await AuthenticationStateProvider.GetGoogleUserSub();
        
        var url = $"{Route.Request.GetProfileWithSub}{Sub}";

        OwnProfile = await ProfileHttp.GetFromJsonAsync<UserDto?>(url);
        
        StateHasChanged();

        await OnProfileFetched();
    }

    private async Task FetchPosts()
    {
        var url = $"{Route.Request.GetPostsForUserHandle}{UserHandle}";
        
        Posts = (await TimelineHttp.GetFromJsonAsync<PostDto[]>(url) ?? Enumerable.Empty<PostDto>()).ToList();
        
        StateHasChanged();
    }

    private async Task OnProfileFetched()
    {
        if (User != null && OwnProfile != null && !CheckedFollow)
        {
            CheckedFollow = true;

            FetchIsFollowing();
            FetchIsFollower();
        }
    }

    private async Task FetchIsFollowing()
    {
        var url = Route.Request.IsFollowing(OwnProfile?.Handle, User?.Handle);

        IsFollowing = await FollowHttp.GetFromJsonAsync<bool>(url);
        
        StateHasChanged();
    }
    
    private async Task FetchIsFollower()
    {
        var url = Route.Request.IsFollowing(User?.Handle, OwnProfile?.Handle);

        IsFollower = await FollowHttp.GetFromJsonAsync<bool>(url);
        
        StateHasChanged();
    }
}